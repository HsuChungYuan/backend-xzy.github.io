<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>geek</title>
  
  <subtitle>geek website</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://backend-xzy.github.io/"/>
  <updated>2019-04-02T04:13:51.968Z</updated>
  <id>http://backend-xzy.github.io/</id>
  
  <author>
    <name>徐中元</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每天一个设计模式——六大设计原则</title>
    <link href="http://backend-xzy.github.io/2019/04/02/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://backend-xzy.github.io/2019/04/02/每天一个设计模式——六大设计原则/</id>
    <published>2019-04-02T02:28:22.000Z</published>
    <updated>2019-04-02T04:13:51.968Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>职责拆分要够细</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>所有父类能够被替换为子类</p><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>即面向接口编程的设计思想</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>细化接口，但是要适度</p><h2 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h2><p>即高内聚，低耦合的设计思想</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>对拓展开放，对修改封闭</p><hr>]]></content>
    
    <summary type="html">
    
      每天一个设计模式——day 1
    
    </summary>
    
      <category term="设计模式" scheme="http://backend-xzy.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://backend-xzy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我是怎么走Java后端这条路的——大二篇</title>
    <link href="http://backend-xzy.github.io/2019/03/31/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E8%B5%B0Java%E5%90%8E%E7%AB%AF%E8%BF%99%E6%9D%A1%E8%B7%AF%E7%9A%84%E2%80%94%E2%80%94%E5%A4%A7%E4%BA%8C%E7%AF%87/"/>
    <id>http://backend-xzy.github.io/2019/03/31/我是怎么走Java后端这条路的——大二篇/</id>
    <published>2019-03-31T12:08:45.000Z</published>
    <updated>2019-04-02T04:17:17.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="萌新"><a href="#萌新" class="headerlink" title="萌新"></a>萌新</h2><p>在进入大学前，我几乎没有接触过编程（除了初中还是小学的时候学过几行HTML/CSS）。对于一个超级小白来说，<strong>确立学习方向</strong>和<em>快速入门</em>是头等大事。</p><h2 id="学校教学"><a href="#学校教学" class="headerlink" title="学校教学"></a>学校教学</h2><p>大学学习靠自己，这句话一点都没有错。我不知道其他好学校是不是这样，但是据我在二本院校的体验，很多专业课老师的教学跟混差不多，学生混，老师也混。我不是说所有老师都不好，但是那些非常重要的课程，一门都不能落下，在不积极自学的情况下，再摊上一个或几个混的老师，那还不完蛋？尤其对于编程这种需要综合知识的，那些短板是真的会拖后腿的。</p><h2 id="入门编程"><a href="#入门编程" class="headerlink" title="入门编程"></a>入门编程</h2><p>学校课程的入门语言是C语言，易学但难用，再加上学校本来也只是把C作为萌新入门语言，学习了半年多之后就放弃了。在接下来的C++，python，Java中，我为什么选择了Java作为主要学习语言呢？</p><h2 id="Java后端之旅"><a href="#Java后端之旅" class="headerlink" title="Java后端之旅"></a>Java后端之旅</h2><p>我不仅学习过Java，也学习过C++和python。我选择Java不是因为Java比这二者更好，也不只是因为我更喜欢Java，最主要的原因是我当时只有Java的低价质高的系列课程。对于萌新而言，一条成体系的、没有沟壑的路是非常非常重要的。<br>在此po出<span class="exturl" data-url="aHR0cHM6Ly9rZS5xcS5jb20vdGVhY2hlci8zNTgwNjQ4MDI=" title="https://ke.qq.com/teacher/358064802">发哥的JavaWeb系列课程<i class="fa fa-external-link"></i></span><br>从不用框架的JSP、servlet和JDBC的传统mvc demo，到Spring Framework、Spring MVC等Spring全家桶框架，钟洪发老师帮我快速地建立起了JavaWeb的一套知识框架。知识体系建立之后就是真正考验自学能力的时候了，所谓师傅领进门，修行在个人。无论是JavaSE深入学习，还是数据库优化，还是自学多种产品，都需要自己去努力。</p><hr><p>博客萌新，写作萌新。其实也没啥好写的，毕竟没啥经历也没啥技术积淀，纯粹是心血来潮想要搞个个人博客哈哈。不过既能锻炼自己的语言组织能力、写作能力，也能记录自己的经历，还能用做笔记，分享交友，一举多得，何乐而不为？语言较为稚嫩，毕竟我本来也没练过写作，还望多多见谅</p>]]></content>
    
    <summary type="html">
    
      跟大家分享一下我是如何从一个懵懂无知的新人逐渐变成一个能完成一定开发任务的学徒。
    
    </summary>
    
    
  </entry>
  
</feed>
