<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>geek</title>
  
  <subtitle>geek website</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://backend-xzy.github.io/"/>
  <updated>2019-04-21T04:03:47.140Z</updated>
  <id>http://backend-xzy.github.io/</id>
  
  <author>
    <name>徐中元</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你是否误用了RESTful风格中面向资源的特点</title>
    <link href="http://backend-xzy.github.io/2019/04/21/%E4%BD%A0%E6%98%AF%E5%90%A6%E8%AF%AF%E7%94%A8%E4%BA%86RESTful%E9%A3%8E%E6%A0%BC%E4%B8%AD%E9%9D%A2%E5%90%91%E8%B5%84%E6%BA%90%E7%9A%84%E7%89%B9%E7%82%B9/"/>
    <id>http://backend-xzy.github.io/2019/04/21/你是否误用了RESTful风格中面向资源的特点/</id>
    <published>2019-04-21T03:35:53.000Z</published>
    <updated>2019-04-21T04:03:47.140Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="什么是-RESTful-风格"><a href="#什么是-RESTful-风格" class="headerlink" title="什么是 RESTful 风格"></a>什么是 RESTful 风格</h2><p>&emsp;&emsp;本文主要讨论 RESTful 面向资源这一条，基础概念这里不多做介绍，不了解的请<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFpZHUuY29tL3M/aWU9VVRGLTgmYW1wO3dkPXJlc3RmdWw=" title="https://www.baidu.com/s?ie=UTF-8&amp;wd=restful">自行搜索 RESTful 的介绍<i class="fa fa-external-link"></i></span></p><h2 id="RESTful-最佳实践"><a href="#RESTful-最佳实践" class="headerlink" title="RESTful 最佳实践"></a>RESTful 最佳实践</h2><p>&emsp;&emsp;<span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTgvMTAvcmVzdGZ1bC1hcGktYmVzdC1wcmFjdGljZXMuaHRtbA==" title="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">阮一峰参考相关资料写出的RESTful最佳实践<i class="fa fa-external-link"></i></span></p><h2 id="回归正题"><a href="#回归正题" class="headerlink" title="回归正题"></a>回归正题</h2><p>&emsp;&emsp;在设计后台接口的时候，有些接口很难使用面向资源的风格去进行设计，比如发送短信验证码和校验验证码的接口。<br>&emsp;&emsp;实际上把这种接口强行用面向资源的风格去进行设计是对 RESTful 面向资源的特点的误用。<br>&emsp;&emsp;为什么这么说呢？因为有些接口“不是资源”，那强行使用面向资源的风格去进行设计只会带来麻烦。</p><hr>]]></content>
    
    <summary type="html">
    
      短信验证码接口设计引发的思考
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>深入理解 JWT 的使用场景和优劣</title>
    <link href="http://backend-xzy.github.io/2019/04/17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JWT%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E5%92%8C%E4%BC%98%E5%8A%A3/"/>
    <id>http://backend-xzy.github.io/2019/04/17/深入理解JWT的使用场景和优劣/</id>
    <published>2019-04-17T12:11:29.000Z</published>
    <updated>2019-04-17T12:17:14.516Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="深入理解-JWT-的使用场景和优劣"><a href="#深入理解-JWT-的使用场景和优劣" class="headerlink" title="深入理解 JWT 的使用场景和优劣"></a>深入理解 JWT 的使用场景和优劣</h2><p><span class="exturl" data-url="aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3M/X19iaXo9TXpJME56RXlPREl5T0E9PSZhbXA7bWlkPTIyNDc0ODM5MTgmYW1wO2lkeD0xJmFtcDtzbj0xMjY4M2JhZTU1ZjJhYjFhODI4MWFiMzk4NDcyMzYyZiZhbXA7Y2hrc209ZTliNThiYzVkZWMyMDJkMzg1ZDFjMWQ4NjFmN2UwZmY0OTUyOTZlZDkzODdiMzJhOGQwMWFlMTk1ZWFlMDM2ODhlNWFlZWJlNjM5NiZhbXA7bXBzaGFyZT0xJmFtcDtzY2VuZT0yMyZhbXA7c3JjaWQ9MDUwNXNuTHJXUTRKandWVzk0b1NNSmFLI3Jk" title="https://mp.weixin.qq.com/s?__biz=MzI0NzEyODIyOA==&amp;mid=2247483918&amp;idx=1&amp;sn=12683bae55f2ab1a8281ab398472362f&amp;chksm=e9b58bc5dec202d385d1c1d861f7e0ff495296ed9387b32a8d01ae195eae03688e5aeebe6396&amp;mpshare=1&amp;scene=23&amp;srcid=0505snLrWQ4JjwVW94oSMJaK#rd">深入理解 JWT 的使用场景和优劣<i class="fa fa-external-link"></i></span></p><hr>]]></content>
    
    <summary type="html">
    
      JWT 入门必读
    
    </summary>
    
      <category term="JWT" scheme="http://backend-xzy.github.io/categories/JWT/"/>
    
    
      <category term="JWT" scheme="http://backend-xzy.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>String.intern 深入研究</title>
    <link href="http://backend-xzy.github.io/2019/04/12/String-intern%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6/"/>
    <id>http://backend-xzy.github.io/2019/04/12/String-intern深入研究/</id>
    <published>2019-04-12T02:23:01.000Z</published>
    <updated>2019-04-12T02:25:52.997Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="String-intern-深入研究"><a href="#String-intern-深入研究" class="headerlink" title="String.intern 深入研究"></a>String.intern 深入研究</h2><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vS2lkZXp5cS9wLzgwNDAzMzguaHRtbA==" title="https://www.cnblogs.com/Kidezyq/p/8040338.html">点击了解详情<i class="fa fa-external-link"></i></span></p><hr>]]></content>
    
    <summary type="html">
    
      不可变的 String 对象与常量池之间的关系
    
    </summary>
    
      <category term="Java拾遗" scheme="http://backend-xzy.github.io/categories/Java%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="Java拾遗" scheme="http://backend-xzy.github.io/tags/Java%E6%8B%BE%E9%81%97/"/>
    
  </entry>
  
  <entry>
    <title>个人学习路线</title>
    <link href="http://backend-xzy.github.io/2019/04/12/%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <id>http://backend-xzy.github.io/2019/04/12/个人学习路线/</id>
    <published>2019-04-12T01:06:49.000Z</published>
    <updated>2019-04-12T01:26:24.914Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="大一上"><a href="#大一上" class="headerlink" title="大一上"></a>大一上</h2><ul><li>C学到链表  </li></ul><h2 id="大一下"><a href="#大一下" class="headerlink" title="大一下"></a>大一下</h2><ul><li>数据结构和算法入门</li><li>Linux 入门</li><li>数据库入门</li><li>JavaSE 入门</li></ul><h2 id="大二上"><a href="#大二上" class="headerlink" title="大二上"></a>大二上</h2><ul><li>JavaWeb 入门</li><li>Hibernate</li><li>Spring 全家桶学到 SpringBoot</li><li>图解 HTTP</li><li>JWT<br>至此已经能快速开发简单的后台项目了  </li></ul><h2 id="大二下（进行中）"><a href="#大二下（进行中）" class="headerlink" title="大二下（进行中）"></a>大二下（进行中）</h2><ul><li>SpringCloud 简单了解</li><li>docker 简单了解（还无法熟练使用）</li><li>JavaSE 重新筑基（Thinking in Java）</li><li>深入理解 Java 虚拟机</li></ul><hr>]]></content>
    
    <summary type="html">
    
      我是怎么走 Java 后端这条路的——大二篇重铸版
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Semaphore详解</title>
    <link href="http://backend-xzy.github.io/2019/04/10/Semaphore%E8%AF%A6%E8%A7%A3/"/>
    <id>http://backend-xzy.github.io/2019/04/10/Semaphore详解/</id>
    <published>2019-04-10T13:11:00.000Z</published>
    <updated>2019-04-12T01:29:13.570Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="Semaph详解"><a href="#Semaph详解" class="headerlink" title="Semaph详解"></a>Semaph详解</h2><p><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS9rbGJjL3AvOTUwMDk0Ny5odG1s" title="http://www.cnblogs.com/klbc/p/9500947.html">点击了解详情<i class="fa fa-external-link"></i></span></p><hr>]]></content>
    
    <summary type="html">
    
      深入理解加强版synchronized
    
    </summary>
    
      <category term="juc" scheme="http://backend-xzy.github.io/categories/juc/"/>
    
    
      <category term="juc" scheme="http://backend-xzy.github.io/tags/juc/"/>
    
      <category term="并发" scheme="http://backend-xzy.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>匿名内部类的隐式final参数</title>
    <link href="http://backend-xzy.github.io/2019/04/05/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E9%9A%90%E5%BC%8Ffinal%E5%8F%82%E6%95%B0/"/>
    <id>http://backend-xzy.github.io/2019/04/05/匿名内部类的隐式final参数/</id>
    <published>2019-04-05T02:53:15.000Z</published>
    <updated>2019-04-05T06:05:40.033Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;标题原文：为什么匿名内部类只能使用final修饰的局部变量。但是在写博文的过程中，发现这句话其实是根本不对的，故将标题改为“匿名内部类的隐式final参数”。<br><a id="more"></a></p><h2 id="1-一句话概念"><a href="#1-一句话概念" class="headerlink" title="1 一句话概念"></a>1 一句话概念</h2><h3 id="emsp-1-1-什么是匿名内部类"><a href="#emsp-1-1-什么是匿名内部类" class="headerlink" title="&emsp;1.1 什么是匿名内部类"></a>&emsp;1.1 什么是匿名内部类</h3><p>&emsp;&emsp;&emsp;匿名内部类就是定义在方法中的类。</p><h3 id="emsp-1-2-什么是局部变量"><a href="#emsp-1-2-什么是局部变量" class="headerlink" title="&emsp;1.2 什么是局部变量"></a>&emsp;1.2 什么是局部变量</h3><p>&emsp;&emsp;&emsp;局部变量就是在方法中被声明的变量。</p><h2 id="2-匿名内部类代码示例"><a href="#2-匿名内部类代码示例" class="headerlink" title="2 匿名内部类代码示例"></a>2 匿名内部类代码示例</h2><figure class="highlight java"><figcaption><span>不使用局部变量的匿名类</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//匿名类定义开始</span></span><br><span class="line">        Interface intface = <span class="keyword">new</span> Interface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;<span class="comment">//匿名类定义结束</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-问题导读"><a href="#3-问题导读" class="headerlink" title="3 问题导读"></a>3 问题导读</h2><ol><li>正常的类应该使用定义在其他方法中的局部变量吗？</li><li>匿名内部类可以使用它外层方法里定义的局部变量吗？</li><li><strong>匿名内部类中使用的变量真的是外层方法的局部变量吗？</strong></li></ol><h2 id="4-匿名内部类代码示例"><a href="#4-匿名内部类代码示例" class="headerlink" title="4 匿名内部类代码示例"></a>4 匿名内部类代码示例</h2><figure class="highlight diff"><figcaption><span>使用了局部变量的匿名内部类，给人的感觉非常自然</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public interface Interface &#123;</span><br><span class="line">    public void function();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"><span class="addition">+       String local = "This is a local variable.";</span></span><br><span class="line">        //匿名类定义开始</span><br><span class="line">        Interface intface = new Interface() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void function() &#123;</span><br><span class="line"><span class="addition">+               System.out.println(local);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;//匿名类定义结束</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-分析"><a href="#5-分析" class="headerlink" title="5 分析"></a>5 分析</h2><p>&emsp;&emsp;对于普通类来说，使用定义在其他方法中的局部变量简直是不可理喻的事情；但是对于匿名内部类来说却又是看起来很正常的事，毕竟这个类完全被外层方法包裹了，能使用外层方法里的局部变量不是很理所应当的吗？<br>&emsp;&emsp;这<strong>好像</strong>就得出结论了，普通类不能使用定义在其他方法中的局部变量，而匿名内部类可以使用定义在外层方法中的局部变量。</p><h2 id="6-匿名内部类中使用的变量真的是外层方法的局部变量吗？"><a href="#6-匿名内部类中使用的变量真的是外层方法的局部变量吗？" class="headerlink" title="6 匿名内部类中使用的变量真的是外层方法的局部变量吗？"></a>6 匿名内部类中使用的变量真的是外层方法的局部变量吗？</h2><p>&emsp;&emsp;众所周知，局部变量是保存在栈中的，而对象内的变量是保存在堆中的，所以<strong><code>匿名内部类中使用的变量不是外层方法的局部变量</code></strong>。实际上匿名内部类中所使用的外部方法中的局部变量，全部都是对于原先局部变量的拷贝，这其实也就是之前所学的函数传参的原理。</p><h2 id="7-那final呢？"><a href="#7-那final呢？" class="headerlink" title="7 那final呢？"></a>7 那final呢？</h2><p>上文所述可以解释<strong><code>隐式</code></strong>和<strong><code>参数</code></strong>这两个关键词，但是final又是什么鬼？别急，我们先来看一段代码<br><figure class="highlight diff"><figcaption><span>不能通过编译的代码</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public interface Interface &#123;</span><br><span class="line">    public void function();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String local = "This is a local variable.";</span><br><span class="line">        //匿名类定义开始</span><br><span class="line">        Interface intface = new Interface() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void function() &#123;</span><br><span class="line"><span class="addition">+               local = "I want to change the variable, but i cannot";</span></span><br><span class="line">                System.out.println(local);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;//匿名类定义结束</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在新增加的语句处会编译报错，报错信息：<code>Variable &#39;local&#39; is accessed from within inner class, needs to be final or effectively final.</code><br>&emsp;&emsp;翻译：变量<code>local</code>在内部类中被访问，需要是<code>final</code>的或者是<code>effectively final</code>的。<code>effectively final</code>就是说如果你永远不修改变量的值，那这个变量就是等价于是<code>final</code>的，这是JDK8增加的新特性。</p><h2 id="8-那为什么是final的呢？不是final的不行吗？"><a href="#8-那为什么是final的呢？不是final的不行吗？" class="headerlink" title="8 那为什么是final的呢？不是final的不行吗？"></a>8 那为什么是final的呢？不是final的不行吗？</h2><p>&emsp;&emsp;现在我们知道了匿名内部类中的隐式参数是final的，但是我们并不知道为什么隐式参数是final的。<br>&emsp;&emsp;其实吧，这个final是为了保证数据一致性。不理解？没关系，我们来看下一段代码<br><figure class="highlight java"><figcaption><span>假设这段代码能够通过编译</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         String local = <span class="string">"This is a local variable."</span>;</span><br><span class="line">         <span class="comment">//匿名类定义开始</span></span><br><span class="line">         Interface intface = <span class="keyword">new</span> Interface() &#123;</span><br><span class="line">             <span class="meta">@Override</span></span><br><span class="line">             <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                 local = <span class="string">"I want to change the variable, but i cannot"</span>;</span><br><span class="line">                 System.out.println(local);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;;<span class="comment">//匿名类定义结束</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;在分析之前，再提一下关键点</p><ol><li>这里实际上有两个local变量，而非一个</li><li>Java设计者希望造成一种错觉，让人们误以为只有一个local变量（这就要求两个变量的数据要一致）  </li></ol><p>&emsp;&emsp;分析：运行至12行，内部类中的local变量被改变了，这就导致两个local变量的值不一样，违背了Java的设计要求，所以Java设计者们规定隐式参数为final来保证数据一致性</p><hr>]]></content>
    
    <summary type="html">
    
      以前没听说过？没事，进来看看，你就懂了
    
    </summary>
    
      <category term="Java拾遗" scheme="http://backend-xzy.github.io/categories/Java%E6%8B%BE%E9%81%97/"/>
    
    
      <category term="Java拾遗" scheme="http://backend-xzy.github.io/tags/Java%E6%8B%BE%E9%81%97/"/>
    
      <category term="匿名内部类" scheme="http://backend-xzy.github.io/tags/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java中的API与SPI</title>
    <link href="http://backend-xzy.github.io/2019/04/03/Java%E4%B8%AD%E7%9A%84API%E4%B8%8ESPI/"/>
    <id>http://backend-xzy.github.io/2019/04/03/Java中的API与SPI/</id>
    <published>2019-04-03T13:05:33.000Z</published>
    <updated>2019-04-03T13:08:25.950Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC83ZTg1YjhlZDAwZTI=" title="https://www.jianshu.com/p/7e85b8ed00e2">点解了解SPI<i class="fa fa-external-link"></i></span></p><hr>]]></content>
    
    <summary type="html">
    
      常见于框架中的SPI，你了解吗？
    
    </summary>
    
    
      <category term="SPI" scheme="http://backend-xzy.github.io/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>两行代码搞定Base64编码</title>
    <link href="http://backend-xzy.github.io/2019/04/03/%E4%B8%A4%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%90%9E%E5%AE%9ABase64%E7%BC%96%E7%A0%81/"/>
    <id>http://backend-xzy.github.io/2019/04/03/两行代码搞定Base64编码/</id>
    <published>2019-04-03T10:56:49.000Z</published>
    <updated>2019-04-03T11:09:11.996Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="两行代码搞定Base64编码"><a href="#两行代码搞定Base64编码" class="headerlink" title="两行代码搞定Base64编码"></a>两行代码搞定Base64编码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拿到Base64编码器</span></span><br><span class="line">Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line"><span class="comment">//通过编码器拿到Base64编码后的字符串</span></span><br><span class="line">String base64Result = encoder.encodeToString(<span class="string">"要加密的东西，不一定是字符串"</span>.getBytes());</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      没错，使用Base64编码就是这么简单
    
    </summary>
    
    
      <category term="Base64" scheme="http://backend-xzy.github.io/tags/Base64/"/>
    
  </entry>
  
  <entry>
    <title>三行代码搞定MD5加密</title>
    <link href="http://backend-xzy.github.io/2019/04/03/%E4%B8%89%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%90%9E%E5%AE%9AMD5%E5%8A%A0%E5%AF%86/"/>
    <id>http://backend-xzy.github.io/2019/04/03/三行代码搞定MD5加密/</id>
    <published>2019-04-03T06:09:44.000Z</published>
    <updated>2019-04-03T11:00:13.062Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="三行代码搞定MD5加密"><a href="#三行代码搞定MD5加密" class="headerlink" title="三行代码搞定MD5加密"></a>三行代码搞定MD5加密</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.buf.HexUtils;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得MD5加密类实例</span></span><br><span class="line">MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">md.update(<span class="string">"要加密的字符串"</span>.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line"><span class="comment">//得到32位的16进制字符串结果</span></span><br><span class="line">String hexResult = HexUtils.toHexString(md.digest());</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    <summary type="html">
    
      没错，使用MD5就是这么简单
    
    </summary>
    
    
      <category term="MD5" scheme="http://backend-xzy.github.io/tags/MD5/"/>
    
  </entry>
  
  <entry>
    <title>每天一个设计模式——六大设计原则</title>
    <link href="http://backend-xzy.github.io/2019/04/02/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://backend-xzy.github.io/2019/04/02/每天一个设计模式——六大设计原则/</id>
    <published>2019-04-02T02:28:22.000Z</published>
    <updated>2019-04-03T01:43:51.262Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><p>职责拆分要够细，一个类只有一个职责</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p>所有父类能够被替换为子类</p><p>即我们能够为子类添加新的方法，但尽量不要重写父类的方法</p><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>即面向接口编程的设计思想</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>这是接口设计的要求，要求一个接口只包含它应该包含的方法，不要编写包含很多杂乱的方法的接口，以至于本来不应该有关系的类通过实现臃肿的接口产生联系</p><h2 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h2><p>即高内聚，低耦合的设计思想</p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>对扩展开放，对修改封闭</p><hr>]]></content>
    
    <summary type="html">
    
      设计模式——编写结构优雅的代码
    
    </summary>
    
      <category term="设计模式" scheme="http://backend-xzy.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://backend-xzy.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>我是怎么走Java后端这条路的——大二篇</title>
    <link href="http://backend-xzy.github.io/2019/03/31/%E6%88%91%E6%98%AF%E6%80%8E%E4%B9%88%E8%B5%B0Java%E5%90%8E%E7%AB%AF%E8%BF%99%E6%9D%A1%E8%B7%AF%E7%9A%84%E2%80%94%E2%80%94%E5%A4%A7%E4%BA%8C%E7%AF%87/"/>
    <id>http://backend-xzy.github.io/2019/03/31/我是怎么走Java后端这条路的——大二篇/</id>
    <published>2019-03-31T12:08:45.000Z</published>
    <updated>2019-04-02T04:17:17.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="萌新"><a href="#萌新" class="headerlink" title="萌新"></a>萌新</h2><p>在进入大学前，我几乎没有接触过编程（除了初中还是小学的时候学过几行HTML/CSS）。对于一个超级小白来说，<strong>确立学习方向</strong>和<em>快速入门</em>是头等大事。</p><h2 id="学校教学"><a href="#学校教学" class="headerlink" title="学校教学"></a>学校教学</h2><p>大学学习靠自己，这句话一点都没有错。我不知道其他好学校是不是这样，但是据我在二本院校的体验，很多专业课老师的教学跟混差不多，学生混，老师也混。我不是说所有老师都不好，但是那些非常重要的课程，一门都不能落下，在不积极自学的情况下，再摊上一个或几个混的老师，那还不完蛋？尤其对于编程这种需要综合知识的，那些短板是真的会拖后腿的。</p><h2 id="入门编程"><a href="#入门编程" class="headerlink" title="入门编程"></a>入门编程</h2><p>学校课程的入门语言是C语言，易学但难用，再加上学校本来也只是把C作为萌新入门语言，学习了半年多之后就放弃了。在接下来的C++，python，Java中，我为什么选择了Java作为主要学习语言呢？</p><h2 id="Java后端之旅"><a href="#Java后端之旅" class="headerlink" title="Java后端之旅"></a>Java后端之旅</h2><p>我不仅学习过Java，也学习过C++和python。我选择Java不是因为Java比这二者更好，也不只是因为我更喜欢Java，最主要的原因是我当时只有Java的低价质高的系列课程。对于萌新而言，一条成体系的、没有沟壑的路是非常非常重要的。<br>在此po出<span class="exturl" data-url="aHR0cHM6Ly9rZS5xcS5jb20vdGVhY2hlci8zNTgwNjQ4MDI=" title="https://ke.qq.com/teacher/358064802">发哥的JavaWeb系列课程<i class="fa fa-external-link"></i></span><br>从不用框架的JSP、servlet和JDBC的传统mvc demo，到Spring Framework、Spring MVC等Spring全家桶框架，钟洪发老师帮我快速地建立起了JavaWeb的一套知识框架。知识体系建立之后就是真正考验自学能力的时候了，所谓师傅领进门，修行在个人。无论是JavaSE深入学习，还是数据库优化，还是自学多种产品，都需要自己去努力。</p><hr><p>博客萌新，写作萌新。其实也没啥好写的，毕竟没啥经历也没啥技术积淀，纯粹是心血来潮想要搞个个人博客哈哈。不过既能锻炼自己的语言组织能力、写作能力，也能记录自己的经历，还能用做笔记，分享交友，一举多得，何乐而不为？语言较为稚嫩，毕竟我本来也没练过写作，还望多多见谅</p>]]></content>
    
    <summary type="html">
    
      跟大家分享一下我是如何从一个懵懂无知的新人逐渐变成一个能完成一定开发任务的学徒。
    
    </summary>
    
    
  </entry>
  
</feed>
